// import { eq } from "drizzle-orm";
import { db } from "~/server/db";
import { transcriptRows, transcriptions } from "~/server/db/schema";
// import { type TranscriptResponse } from "youtube-transcript";
import fetchTranscript, {
  fetchMetaData,
  fetchTranscriptDBCreator,
  fetchTranscriptionRows,
  fetchVideoTranscrptDB,
} from "~/lib/helpers/transcript";
import { redirect } from "next/navigation";
import { auth } from "~/auth";
import { textTotext } from "~/lib/helpers/gemini";

export default async function Page({ params }: { params: { id: string } }) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const session: {
    userId: string;
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
  } = await auth();

  if (!session) {
    return redirect("/api/auth/signin?callbackUrl=/generate/" + params.id);
  }

  // check if video is already generated for this creator
  const video = await fetchTranscriptDBCreator(params.id, session.userId);

  // if video is already generated, redirect to the video page for this creator
  if(video[0]) {
    return redirect("/c/" + session.userId + "/vid/" + params.id);
  }

  const videoBySomeoneElse = await fetchVideoTranscrptDB(params.id);
  
  // if video generated by other, 
  // create a new video for this creator
  // with same transcription as the video generated by other
  if(videoBySomeoneElse[0]) {
    // create a new video for this creator
    await db
      .insert(transcriptions)
      .values({
        title: videoBySomeoneElse[0].title,
        thumbnail: videoBySomeoneElse[0].thumbnail,
        channelTitle: videoBySomeoneElse[0].channelTitle,
        userId: session.userId,
        summary: videoBySomeoneElse[0].summary,
        videoId: params.id,
      })
      .onConflictDoNothing();


     return redirect("/c/" + session.userId + "/vid/" + params.id); 
  }


  // Fetch Meta Data for video
  const metaData = await fetchMetaData(params.id);

  // Fetch transcript -> remove all HTML code strings in the transcript
   const res = await fetchTranscript(params.id);

  // if no transcript found, create a new video for this creator without summary
  if(res.length == 0) {
    await db.insert(transcriptions).values({ 
      title: metaData.title,
      thumbnail: metaData.thumbnail_url,
      channelTitle: metaData.author_name,
      userId: session.userId,
      summary: "",
      videoId: params.id,
    }).onConflictDoNothing();
  }
  // if transcript found Get Summary 
    const copyRes: {
      transcriptText: string;
      duration: string;
      offset: string;
      videoId: string;
    }[] = [];

    let para = "";

    res.forEach((item) => {
      copyRes.push({
        transcriptText: item.text,
        duration: item.duration.toString(),
        offset: item.offset.toString(),
        videoId: params.id,
      });
      para += item.text;
    });

    let summary = "";
    if (para) {
      summary = await textTotext("Summarize the video", para);
      // Create transcript rows for this video
      await db.insert(transcriptRows).values(copyRes);
    }

  // Create a new video for this creator
  await db
    .insert(transcriptions)
    .values({
      title: metaData.title,
      thumbnail: metaData.thumbnail_url,
      channelTitle: metaData.author_name,
      userId: session.userId,
      summary: summary,
      videoId: params.id,
    })
    .onConflictDoNothing();

  return redirect("/c/" + session.userId + "/vid/" + params.id);
}
